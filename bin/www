#!/usr/bin/env node

/**
 * Module dependencies.
 */
// var express = require('express');
var app = require('../app');
var debug = require('debug')('myproj:server');
var http = require('http');
var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);
var server = http.createServer(app);
var io = require('socket.io')(server);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
var User = require('../proxy').User;
var Chat = require('../proxy').Chat;

/**
 * Normalize a port into a number, string, or false.
 */
io.sockets.on('connection', function(socket){
  // socket.on('login', function(name){
  //   if(names.indexOf(name) == -1){
  //     names.push(name);
  //     socket.broadcast.emit('login', name);
  //   }
  //   io.sockets.emit('usersList', names);
  // });
  socket.on('chat', function(data){
    io.sockets.emit('chat', data);
    Chat.newChatSave(data,function () {
      console.log('已保存')
    })
  });
  // socket.on('logout', function(name){
  //   for(var i = 0; i < names.length; i++){
  //     if(names[i] == name){
  //       names.splice(i, 1);
  //       break;
  //     }
  //   }
  //   io.sockets.emit('usersList', names);
  // });
});


     
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log('Express server listening on port ' + app.get('port'));
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

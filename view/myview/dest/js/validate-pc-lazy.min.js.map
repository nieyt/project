{"version":3,"sources":["webpack:///validate-pc-lazy.min.js","webpack:///./scripts/widget/validate-pc-lazy.js"],"names":["webpackJsonp","137","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_classCallCheck2","_classCallCheck3","Validate","options","this","target","errorClassName","blur","isOk","callback","firstCheckSelf","time","breakFn","resultState","position","$","extend","tooltip","_method","required","value","rule","result","message","defaultValue","attr","length","minLength","maxLength","rangeLength","min","isNaN","Number","max","range","parseInt","isNumber","isDigits","reg","test","isEmail","isUrl","isPhone","isMobile","isIdCard","isPostCode","isIP","equalTo","val","trim","date","isQQ","cnName","hasCnChar","regEXP","RegExp","e","childrenSelect","element","split","className","children","each","hasClass","init","prototype","_event","_blur","self","find","prop","_checkRule","call","_removeClass","check","num","_getRule","i","_getMessage","showError","me","parseJSON","getVelidateResult","removeClass","layer","closeAll","addClass","tips"],"mappings":"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","file":"validate-pc-lazy.min.js","sourcesContent":["webpackJsonp([6],{\n\n/***/ 137:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _classCallCheck2 = __webpack_require__(32);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\t__webpack_require__(44);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar Validate = function () {\n\t    function Validate(options) {\n\t        (0, _classCallCheck3['default'])(this, Validate);\n\t\n\t        this.options = {\n\t            target: \".validate_box\", // 验证区域\n\t            errorClassName: 'f_error', // 验证失败样式\n\t            blur: true, // 是否支持失去焦点即验证\n\t            isOk: true, // 验证区域的验证结果\n\t            callback: null, // 验证不通过回调函数\n\t            firstCheckSelf: true,\n\t            time: 3000,\n\t            breakFn: null,\n\t            resultState: false,\n\t            position: 2\n\t        };\n\t        if (options) {\n\t            $.extend(this.options, options);\n\t        }\n\t        this.tooltip = null; // 存储tooltip实例\n\t        this._method = {\n\t            // 必填\n\t            required: function required(value, rule) {\n\t                var result = {\n\t                    message: \"此项为必填项\",\n\t                    isOk: true\n\t                };\n\t                var defaultValue = $(this).attr(\"defaultvalue\");\n\t                if (!rule) {\n\t                    return result;\n\t                }\n\t                if (!value.length || defaultValue == value) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            // 最小长度\n\t            minLength: function minLength(value, rule) {\n\t                var result = {\n\t                    message: \"输入长度最小是\" + rule + \"的字符串\",\n\t                    isOk: true\n\t                };\n\t                if (value.length < rule) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            // 最大长度\n\t            maxLength: function maxLength(value, rule) {\n\t                var result = {\n\t                    message: \"输入长度最大是\" + rule + \"的字符串\",\n\t                    isOk: true\n\t                };\n\t                if (value.length > rule) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            // 长度区间\n\t            rangeLength: function rangeLength(value, rule) {\n\t                var result = {\n\t                    message: \"输入长度必须介于 \" + rule[0] + \" 和 \" + rule[1] + \" 之间的字符串\",\n\t                    isOk: true\n\t                };\n\t                if (value.length < rule[0] || value.length > rule[1]) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            // 最小值\n\t            min: function min(value, rule) {\n\t                var result = {\n\t                    message: \"最小值不能小于\" + rule,\n\t                    isOk: true\n\t                };\n\t                if (isNaN(Number(value))) {\n\t                    result.isOk = false;\n\t                    return result;\n\t                }\n\t                if (Number(value) < Number(rule)) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            // 最大值\n\t            max: function max(value, rule) {\n\t                var result = {\n\t                    message: \"最大值不能大于\" + rule,\n\t                    isOk: true\n\t                };\n\t                if (isNaN(value)) {\n\t                    result.isOk = false;\n\t                    return result;\n\t                }\n\t                if (Number(value) > Number(rule)) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            // 范围\n\t            range: function range(value, rule) {\n\t                var result = {\n\t                    message: \"请输入\" + rule[0] + \"至\" + rule[1] + \"之间的数字\",\n\t                    isOk: true\n\t                };\n\t                value = parseInt(value);\n\t                if (typeof value != 'Number') {\n\t                    result.isOk = false;\n\t                } else if (value < rule[0] || value > rule[1]) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            // 数字\n\t            isNumber: function isNumber(value, rule) {\n\t                var result = {\n\t                    message: \"请输入数字\",\n\t                    isOk: true\n\t                };\n\t                if (!rule) {\n\t                    return result;\n\t                }\n\t                if (isNaN(value)) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            // 整数\n\t            isDigits: function isDigits(value, rule) {\n\t                var reg = /^-?[1-9]\\d*$/;\n\t                var result = {\n\t                    message: \"请输入整数\",\n\t                    isOk: true\n\t                };\n\t                if (!rule) {\n\t                    return result;\n\t                }\n\t                if (!reg.test(value)) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            // 匹配电子邮箱\n\t            isEmail: function isEmail(value, rule) {\n\t                //var reg = /\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/;\n\t                var reg = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i;\n\t                var result = {\n\t                    message: \"请输入正确的电子邮箱\",\n\t                    isOk: true\n\t                };\n\t                if (!rule) {\n\t                    return result;\n\t                }\n\t                if (!reg.test(value) || value.length == 0) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            // 匹配URL\n\t            isUrl: function isUrl(value, rule) {\n\t                //var reg = /(https?|ftp|mms):\\/\\/([A-z0-9]+[_\\-]?[A-z0-9]+\\.)*[A-z0-9]+\\-?[A-z0-9]+\\.[A-z]{2,}(\\/.*)*\\/?/;\n\t                var reg = /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i;\n\t                var result = {\n\t                    message: \"请输入正确的URL\",\n\t                    isOk: true\n\t                };\n\t                if (!rule) {\n\t                    return result;\n\t                }\n\t                if (!reg.test(value) || value.length == 0) {\n\t                    result.isOk = false;\n\t                }\n\t                var bbb = \"123\";\n\t                return result;\n\t            },\n\t            // 匹配国内座机\n\t            isPhone: function isPhone(value, rule) {\n\t                var reg = /^((0\\d{2,3})-)?(\\d{7,8})(-(\\d{3,}))?$/;\n\t                var result = {\n\t                    message: \"请输入正确的电话号码\",\n\t                    isOk: true\n\t                };\n\t                if (!rule) {\n\t                    return result;\n\t                }\n\t                if (!reg.test(value) || value.length == 0) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            // 匹配手机号\n\t            isMobile: function isMobile(value, rule) {\n\t                var reg = /1[3,4,5,8]\\d{9}$/;\n\t                var result = {\n\t                    message: \"请输入正确的手机号码\",\n\t                    isOk: true\n\t                };\n\t                if (!rule) {\n\t                    return result;\n\t                }\n\t                if (!reg.test(value)) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            // 匹配身份证\n\t            isIdCard: function isIdCard(value, rule) {\n\t                var reg = /^[1-9][0-7]\\d{4}((19\\d{2}(0[13-9]|1[012])(0[1-9]|[12]\\d|30))|(19\\d{2}(0[13578]|1[02])31)|(19\\d{2}02(0[1-9]|1\\d|2[0-8]))|(19([13579][26]|[2468][048]|0[48])0229))\\d{3}(\\d|X|x)?$/;\n\t                var result = {\n\t                    message: \"请输入正确的身份证号码\",\n\t                    isOk: true\n\t                };\n\t                if (!rule) {\n\t                    return result;\n\t                }\n\t                if (!reg.test(value)) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            // 匹配邮政编码\n\t            isPostCode: function isPostCode(value, rule) {\n\t                var reg = /^[1-9]\\d{5}$/;\n\t                var result = {\n\t                    message: \"请输入正确的邮政编码\",\n\t                    isOk: true\n\t                };\n\t                if (!rule) {\n\t                    return result;\n\t                }\n\t                if (!reg.test(value) || value.length != 6) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            // 匹配邮政编码\n\t            isIP: function isIP(value, rule) {\n\t                var reg = /^((0[0-9]|1[0-9]\\d{1,2})|(2[0-5][0-5])|(2[0-4][0-9])|(\\d{1,2}))\\.((0[0-9]|1[0-9]\\d{1,2})|(2[0-5][0-5])|(2[0-4][0-9])|(\\d{1,2}))\\.((0[0-9]|1[0-9]\\d{1,2})|(2[0-4][0-9])|(2[0-5][0-5])|(\\d{1,2}))\\.((0[0-9]|1[0-9]\\d{1,2})|(2[0-4][0-9])|(2[0-5][0-5])|(\\d{1,2}))$/;\n\t                var result = {\n\t                    message: \"请输入正确的IP地址\",\n\t                    isOk: true\n\t                };\n\t                if (!rule) {\n\t                    return result;\n\t                }\n\t                if (!reg.test(value)) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            // 验证输入相同\n\t            equalTo: function equalTo(value, rule) {\n\t                var val = $.trim($(rule).val());\n\t                var result = {\n\t                    message: \"两次输入不一致\",\n\t                    isOk: true\n\t                };\n\t                if (value !== val) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            // 验证日期，只验证格式，不验证有效性\n\t            date: function date(value, rule) {\n\t                var result = {\n\t                    message: \"请输入正确格式的日期，例如：2009-06-23，1998/01/22 只验证格式，不验证有效性\",\n\t                    isOk: true\n\t                };\n\t                if (!rule) {\n\t                    return result;\n\t                }\n\t                var reg = /^(\\d{4})-(\\d{1,2})-(\\d{1,2})|(^\\d{4})\\/(\\d{1,2})\\/(\\d{1,2})/;\n\t                if (!reg.test(value)) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            //验证QQ\n\t            isQQ: function isQQ(value, rule) {\n\t                var reg = /^\\d{5,10}$/;\n\t                var result = {\n\t                    message: \"请输入正确的QQ号\",\n\t                    isOk: true\n\t                };\n\t                if (!rule) {\n\t                    return result;\n\t                }\n\t                if (!reg.test(value)) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            // 中文姓名\n\t            cnName: function cnName(value, rule) {\n\t                var reg = /^[\\u4e00-\\u9fa5a-zA-Z-]+$/;\n\t                var result = {\n\t                    message: \"中文姓名只能包含汉字（至少一个）、字母和连字符，生僻字可用拼音代替\",\n\t                    isOk: true\n\t                };\n\t                if (!rule) {\n\t                    return result;\n\t                }\n\t                if (!reg.test(value)) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            // 至少N个中文汉字\n\t            hasCnChar: function hasCnChar(value, rule) {\n\t                var reg = /[\\u0100-\\uffff]/;\n\t                var result = {\n\t                    message: \"至少包含一个中文\",\n\t                    isOk: true\n\t                };\n\t                if (!rule) {\n\t                    return result;\n\t                }\n\t                if (reg.test(value)) {\n\t                    return result;\n\t                }\n\t                return result.isOk = false;\n\t            },\n\t            // 自定义正则校验\n\t            regEXP: function regEXP(value, rule) {\n\t                var result = {\n\t                    message: \"内容不符合要求\",\n\t                    isOk: true\n\t                };\n\t                try {\n\t                    var reg = new RegExp(rule);\n\t                } catch (e) {\n\t                    return result;\n\t                }\n\t                if (!reg.test(value)) {\n\t                    result.isOk = false;\n\t                }\n\t                return result;\n\t            },\n\t            //\n\t            childrenSelect: function childrenSelect(value, rule) {\n\t                var result = {\n\t                    message: \"请选择一条记录\",\n\t                    isOk: false\n\t                };\n\t                var element = rule.split(',')[0];\n\t                var className = rule.split(',')[1];\n\t                $(this).children(element).each(function () {\n\t                    if ($(this).hasClass(className)) {\n\t                        result.isOk = true;\n\t                        return false;\n\t                    } else {\n\t                        result.isOk = false;\n\t                    }\n\t                });\n\t                return result;\n\t            }\n\t        };\n\t        this.init();\n\t    }\n\t\n\t    Validate.prototype.init = function init() {\n\t        this._event();\n\t    };\n\t\n\t    Validate.prototype._event = function _event() {\n\t        if (this.options.blur) {\n\t            this._blur();\n\t        }\n\t    };\n\t    // 失去焦点\n\t\n\t\n\t    Validate.prototype._blur = function _blur() {\n\t        var self = this;\n\t        var result = true;\n\t        var noblur = false;\n\t        $(this.options.target).find('*[rule]').blur(function () {\n\t            // 禁用的文本框跳过，不进行验证\n\t            if ($(this).prop(\"disabled\")) {\n\t                return;\n\t            }\n\t            if (self.options.firstCheckSelf) {\n\t                result = self._checkRule.call(this, self, 1);\n\t                if (result) {\n\t                    self._removeClass.call(self, this);\n\t                    //搜索页面不需要实时验证上面未填的选项\n\t                    self.check(this);\n\t                }\n\t            } else {\n\t                self.check(this);\n\t            }\n\t            if (self.options.callback && typeof self.options.callback == 'function') {\n\t                self.options.callback.call(self);\n\t            }\n\t        });\n\t    };\n\t    // 验证所有\n\t\n\t\n\t    Validate.prototype.check = function check(target) {\n\t        var self = this;\n\t        var result = true;\n\t        $(this.options.target).find('*[rule]').each(function () {\n\t            if (this === target) {\n\t                return false;\n\t            }\n\t            result = self._checkRule.call(this, self);\n\t            if (!result) {\n\t                return false;\n\t            }\n\t            self._removeClass.call(self, this);\n\t            if (self.options.breakFn) {\n\t                if (!self.options.breakFn()) {\n\t                    return false;\n\t                }\n\t            }\n\t        });\n\t\n\t        return this.options.isOk;\n\t    };\n\t    // 执行验证\n\t\n\t\n\t    Validate.prototype._checkRule = function _checkRule(self, num) {\n\t        var rule = self._getRule(this);\n\t        if (rule) {\n\t            var value = $.trim($(this).val());\n\t            var result = {};\n\t            for (var i in rule) {\n\t                // 当用户配置的验证不存在，则忽略进行下一个匹配校验\n\t                try {\n\t                    result = self._method[i].call(this, value, rule[i]);\n\t                } catch (e) {\n\t                    //console.log(\"验证规则\"+i+\"暂不存在\");\n\t                    continue;\n\t                }\n\t                if (!result.isOk) {\n\t                    if (!self._getMessage(this)) {\n\t                        self.showError(this, result.message);\n\t                    } else {\n\t                        var message = self._getMessage(this)[i];\n\t                        if (message) {\n\t                            self.showError(this, message);\n\t                        } else {\n\t                            self.showError(this, result.message);\n\t                        }\n\t                    }\n\t                    return self.options.isOk = false;\n\t                }\n\t            }\n\t            return self.options.isOk = true;\n\t        }\n\t        return self.options.isOk = true;\n\t    };\n\t    // 获取自定义验证规则\n\t\n\t\n\t    Validate.prototype._getRule = function _getRule(me) {\n\t        var rule = $(me).attr(\"rule\");\n\t        if (rule) {\n\t            rule = $.parseJSON(rule);\n\t        }\n\t        return rule;\n\t    };\n\t    // 获取自定义验证信息\n\t\n\t\n\t    Validate.prototype._getMessage = function _getMessage(me) {\n\t        var message = $(me).attr(\"message\");\n\t        if (message) {\n\t            message = $.parseJSON(message);\n\t        }\n\t        return message;\n\t    };\n\t    // 获取验证结果\n\t\n\t\n\t    Validate.prototype.getVelidateResult = function getVelidateResult() {\n\t        return this.options.isOk;\n\t    };\n\t    // 验证成功后删除错误class名\n\t\n\t\n\t    Validate.prototype._removeClass = function _removeClass(target) {\n\t        $(target).removeClass(this.options.errorClassName);\n\t        layer.closeAll();\n\t    };\n\t    // 验证失败提示\n\t\n\t\n\t    Validate.prototype.showError = function showError(target, message, self) {\n\t        $(target).addClass(this.options.errorClassName);\n\t        layer.tips(message, target, {\n\t            time: this.options.time,\n\t            tips: [this.options.position, '#f90']\n\t        });\n\t    };\n\t\n\t    return Validate;\n\t}();\n\t\n\texports['default'] = Validate;\n\tmodule.exports = exports['default'];\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// validate-pc-lazy.min.js","import 'layerPc301';\r\nclass Validate {\r\n    constructor(options) {\r\n        this.options = {\r\n            target: \".validate_box\",                        // 验证区域\r\n            errorClassName: 'f_error',                      // 验证失败样式\r\n            blur: true,                                     // 是否支持失去焦点即验证\r\n            isOk: true,                                     // 验证区域的验证结果\r\n            callback: null,                                 // 验证不通过回调函数\r\n            firstCheckSelf: true,\r\n            time: 3000,\r\n            breakFn: null,\r\n            resultState:false,\r\n            position:2\r\n        }\r\n        if (options) {\r\n            $.extend(this.options, options);\r\n        }\r\n        this.tooltip = null;// 存储tooltip实例\r\n        this._method = {\r\n            // 必填\r\n            required:function(value,rule){\r\n                var result = {\r\n                    message: \"此项为必填项\",\r\n                    isOk: true\r\n                }\r\n                var defaultValue = $(this).attr(\"defaultvalue\");\r\n                if (!rule) {\r\n                    return result;\r\n                }\r\n                if (!value.length || defaultValue == value) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            // 最小长度\r\n            minLength: function (value, rule) {\r\n                var result = {\r\n                    message: \"输入长度最小是\" + rule + \"的字符串\",\r\n                    isOk: true\r\n                }\r\n                if (value.length < rule) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            // 最大长度\r\n            maxLength: function (value, rule) {\r\n                var result = {\r\n                    message: \"输入长度最大是\" + rule + \"的字符串\",\r\n                    isOk: true\r\n                }\r\n                if (value.length > rule) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            // 长度区间\r\n            rangeLength: function (value, rule) {\r\n                var result = {\r\n                    message: \"输入长度必须介于 \" + rule[0] + \" 和 \" + rule[1] + \" 之间的字符串\",\r\n                    isOk: true\r\n                }\r\n                if ((value.length < rule[0]) || (value.length > rule[1])) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            // 最小值\r\n            min: function (value, rule) {\r\n                var result = {\r\n                    message: \"最小值不能小于\" + rule,\r\n                    isOk: true\r\n                }\r\n                if (isNaN(Number(value))) {\r\n                    result.isOk = false;\r\n                    return result;\r\n                }\r\n                if (Number(value) < Number(rule)) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            // 最大值\r\n            max: function (value, rule) {\r\n                var result = {\r\n                    message: \"最大值不能大于\" + rule,\r\n                    isOk: true\r\n                }\r\n                if (isNaN(value)) {\r\n                    result.isOk = false;\r\n                    return result;\r\n                }\r\n                if (Number(value) > Number(rule)) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            // 范围\r\n            range: function (value, rule) {\r\n                var result = {\r\n                    message: \"请输入\" + rule[0] + \"至\" + rule[1] + \"之间的数字\",\r\n                    isOk: true\r\n                }\r\n                value = parseInt(value);\r\n                if (typeof value != 'Number') {\r\n                    result.isOk = false;\r\n                } else if ((value < rule[0]) || (value > rule[1])) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            // 数字\r\n            isNumber: function (value, rule) {\r\n                var result = {\r\n                    message: \"请输入数字\",\r\n                    isOk: true\r\n                };\r\n                if (!rule) {\r\n                    return result;\r\n                }\r\n                if (isNaN(value)) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            // 整数\r\n            isDigits: function (value, rule) {\r\n                var reg = /^-?[1-9]\\d*$/;\r\n                var result = {\r\n                    message: \"请输入整数\",\r\n                    isOk: true\r\n                };\r\n                if (!rule) {\r\n                    return result;\r\n                }\r\n                if (!reg.test(value)) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            // 匹配电子邮箱\r\n            isEmail: function (value, rule) {\r\n                //var reg = /\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/;\r\n                var reg = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i;\r\n                var result = {\r\n                    message: \"请输入正确的电子邮箱\",\r\n                    isOk: true\r\n                };\r\n                if (!rule) {\r\n                    return result;\r\n                }\r\n                if (!reg.test(value) || value.length == 0) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            // 匹配URL\r\n            isUrl: function (value, rule) {\r\n                //var reg = /(https?|ftp|mms):\\/\\/([A-z0-9]+[_\\-]?[A-z0-9]+\\.)*[A-z0-9]+\\-?[A-z0-9]+\\.[A-z]{2,}(\\/.*)*\\/?/;\r\n                var reg = /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i;\r\n                var result = {\r\n                    message: \"请输入正确的URL\",\r\n                    isOk: true\r\n                };\r\n                if (!rule) {\r\n                    return result;\r\n                }\r\n                if (!reg.test(value) || value.length == 0) {\r\n                    result.isOk = false;\r\n                }\r\n                let bbb=\"123\";\r\n                return result;\r\n            },\r\n            // 匹配国内座机\r\n            isPhone: function (value, rule) {\r\n                var reg = /^((0\\d{2,3})-)?(\\d{7,8})(-(\\d{3,}))?$/;\r\n                var result = {\r\n                    message: \"请输入正确的电话号码\",\r\n                    isOk: true\r\n                };\r\n                if (!rule) {\r\n                    return result;\r\n                }\r\n                if (!reg.test(value) || value.length == 0) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            // 匹配手机号\r\n            isMobile: function (value, rule) {\r\n                var reg = /1[3,4,5,8]\\d{9}$/;\r\n                var result = {\r\n                    message: \"请输入正确的手机号码\",\r\n                    isOk: true\r\n                };\r\n                if (!rule) {\r\n                    return result;\r\n                }\r\n                if (!reg.test(value)) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            // 匹配身份证\r\n            isIdCard: function (value, rule) {\r\n                var reg = /^[1-9][0-7]\\d{4}((19\\d{2}(0[13-9]|1[012])(0[1-9]|[12]\\d|30))|(19\\d{2}(0[13578]|1[02])31)|(19\\d{2}02(0[1-9]|1\\d|2[0-8]))|(19([13579][26]|[2468][048]|0[48])0229))\\d{3}(\\d|X|x)?$/;\r\n                var result = {\r\n                    message: \"请输入正确的身份证号码\",\r\n                    isOk: true\r\n                };\r\n                if (!rule) {\r\n                    return result;\r\n                }\r\n                if (!reg.test(value)) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            // 匹配邮政编码\r\n            isPostCode: function (value, rule) {\r\n                var reg = /^[1-9]\\d{5}$/;\r\n                var result = {\r\n                    message: \"请输入正确的邮政编码\",\r\n                    isOk: true\r\n                };\r\n                if (!rule) {\r\n                    return result;\r\n                }\r\n                if (!reg.test(value) || (value.length != 6)) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            // 匹配邮政编码\r\n            isIP: function (value, rule) {\r\n                var reg = /^((0[0-9]|1[0-9]\\d{1,2})|(2[0-5][0-5])|(2[0-4][0-9])|(\\d{1,2}))\\.((0[0-9]|1[0-9]\\d{1,2})|(2[0-5][0-5])|(2[0-4][0-9])|(\\d{1,2}))\\.((0[0-9]|1[0-9]\\d{1,2})|(2[0-4][0-9])|(2[0-5][0-5])|(\\d{1,2}))\\.((0[0-9]|1[0-9]\\d{1,2})|(2[0-4][0-9])|(2[0-5][0-5])|(\\d{1,2}))$/;\r\n                var result = {\r\n                    message: \"请输入正确的IP地址\",\r\n                    isOk: true\r\n                };\r\n                if (!rule) {\r\n                    return result;\r\n                }\r\n                if (!reg.test(value)) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            // 验证输入相同\r\n            equalTo: function (value, rule) {\r\n                var val = $.trim($(rule).val());\r\n                var result = {\r\n                    message: \"两次输入不一致\",\r\n                    isOk: true\r\n                };\r\n                if (value !== val) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            // 验证日期，只验证格式，不验证有效性\r\n            date: function (value, rule) {\r\n                var result = {\r\n                    message: \"请输入正确格式的日期，例如：2009-06-23，1998/01/22 只验证格式，不验证有效性\",\r\n                    isOk: true\r\n                };\r\n                if (!rule) {\r\n                    return result;\r\n                }\r\n                var reg = /^(\\d{4})-(\\d{1,2})-(\\d{1,2})|(^\\d{4})\\/(\\d{1,2})\\/(\\d{1,2})/;\r\n                if (!reg.test(value)) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            //验证QQ\r\n            isQQ: function (value, rule) {\r\n                var reg = /^\\d{5,10}$/;\r\n                var result = {\r\n                    message: \"请输入正确的QQ号\",\r\n                    isOk: true\r\n                };\r\n                if (!rule) {\r\n                    return result;\r\n                }\r\n                if (!reg.test(value)) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            // 中文姓名\r\n            cnName: function (value, rule) {\r\n                var reg = /^[\\u4e00-\\u9fa5a-zA-Z-]+$/;\r\n                var result = {\r\n                    message: \"中文姓名只能包含汉字（至少一个）、字母和连字符，生僻字可用拼音代替\",\r\n                    isOk: true\r\n                };\r\n                if (!rule) {\r\n                    return result;\r\n                }\r\n                if (!reg.test(value)) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            // 至少N个中文汉字\r\n            hasCnChar: function (value, rule) {\r\n                var reg = /[\\u0100-\\uffff]/;\r\n                var result = {\r\n                    message: \"至少包含一个中文\",\r\n                    isOk: true\r\n                };\r\n                if (!rule) {\r\n                    return result;\r\n                }\r\n                if (reg.test(value)) {\r\n                    return result;\r\n                }\r\n                return result.isOk = false;\r\n            },\r\n            // 自定义正则校验\r\n            regEXP: function (value, rule) {\r\n                var result = {\r\n                    message: \"内容不符合要求\",\r\n                    isOk: true\r\n                };\r\n                try {\r\n                    var reg = new RegExp(rule);\r\n                } catch (e) {\r\n                    return result;\r\n                }\r\n                if (!reg.test(value)) {\r\n                    result.isOk = false;\r\n                }\r\n                return result;\r\n            },\r\n            //\r\n            childrenSelect: function (value, rule) {\r\n                var result = {\r\n                    message: \"请选择一条记录\",\r\n                    isOk: false\r\n                };\r\n                var element = rule.split(',')[0];\r\n                var className = rule.split(',')[1];\r\n                $(this).children(element).each(function () {\r\n                    if ($(this).hasClass(className)) {\r\n                        result.isOk = true;\r\n                        return false;\r\n                    } else {\r\n                        result.isOk = false;\r\n                    }\r\n                });\r\n                return result;\r\n            }\r\n        }\r\n        this.init();\r\n    }\r\n    init() {\r\n        this._event();\r\n    }\r\n    _event() {\r\n        if (this.options.blur) {\r\n            this._blur();\r\n        }\r\n    }\r\n    // 失去焦点\r\n    _blur() {\r\n        var self = this;\r\n        var result = true;\r\n        var noblur = false;\r\n        $(this.options.target).find('*[rule]').blur(function () {\r\n            // 禁用的文本框跳过，不进行验证\r\n            if($(this).prop(\"disabled\")){\r\n                return;\r\n            }\r\n            if (self.options.firstCheckSelf) {\r\n                result = self._checkRule.call(this, self,1);\r\n                if (result) {\r\n                    self._removeClass.call(self, this);\r\n                    //搜索页面不需要实时验证上面未填的选项\r\n                    self.check(this)\r\n                }\r\n            } else {\r\n                self.check(this)\r\n            }\r\n            if (self.options.callback && (typeof self.options.callback == 'function')) {\r\n                self.options.callback.call(self);\r\n            }\r\n        });\r\n    }\r\n    // 验证所有\r\n    check(target) {\r\n        var self = this;\r\n        var result = true;\r\n        $(this.options.target).find('*[rule]').each(function () {\r\n            if (this === target) {\r\n                return false;\r\n            }\r\n            result = self._checkRule.call(this, self);\r\n            if (!result) {\r\n                return false;\r\n            }\r\n            self._removeClass.call(self, this);\r\n            if (self.options.breakFn) {\r\n                if (!self.options.breakFn()) {\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n\r\n        return this.options.isOk;\r\n    }\r\n    // 执行验证\r\n    _checkRule(self,num) {\r\n        var rule = self._getRule(this);\r\n        if (rule) {\r\n            var value = $.trim($(this).val());\r\n            var result = {};\r\n            for (var i in rule) {\r\n                // 当用户配置的验证不存在，则忽略进行下一个匹配校验\r\n                try {\r\n                    result = self._method[i].call(this, value, rule[i]);\r\n                } catch (e) {\r\n                    //console.log(\"验证规则\"+i+\"暂不存在\");\r\n                    continue;\r\n                }\r\n                if (!result.isOk) {\r\n                    if (!self._getMessage(this)) {\r\n                        self.showError(this, result.message);\r\n                    } else {\r\n                        var message = self._getMessage(this)[i];\r\n                        if (message) {\r\n                            self.showError(this, message);\r\n                        } else {\r\n                            self.showError(this, result.message);\r\n                        }\r\n                    }\r\n                    return self.options.isOk = false;\r\n                }\r\n            }\r\n            return self.options.isOk = true;\r\n        }\r\n        return self.options.isOk = true;\r\n    }\r\n    // 获取自定义验证规则\r\n    _getRule(me) {\r\n        var rule = $(me).attr(\"rule\");\r\n        if (rule) {\r\n            rule = $.parseJSON(rule);\r\n        }\r\n        return rule;\r\n    }\r\n    // 获取自定义验证信息\r\n    _getMessage(me) {\r\n        var message = $(me).attr(\"message\");\r\n        if (message) {\r\n            message = $.parseJSON(message);\r\n        }\r\n        return message;\r\n    }\r\n    // 获取验证结果\r\n    getVelidateResult() {\r\n        return this.options.isOk;\r\n    }\r\n    // 验证成功后删除错误class名\r\n    _removeClass(target) {\r\n        $(target).removeClass(this.options.errorClassName);\r\n        layer.closeAll();\r\n    }\r\n    // 验证失败提示\r\n    showError(target, message, self) {\r\n        $(target).addClass(this.options.errorClassName);\r\n        layer.tips(message,target,{\r\n            time:this.options.time,\r\n            tips: [this.options.position, '#f90']\r\n        });\r\n    }\r\n}\r\nexport default Validate;\n\n\n// WEBPACK FOOTER //\n// ./scripts/widget/validate-pc-lazy.js"],"sourceRoot":""}
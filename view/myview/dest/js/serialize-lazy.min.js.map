{"version":3,"sources":["webpack:///./scripts/widget/serialize-lazy.js"],"names":["Serialize","getJSON","panel","self","data","$","Error","find","each","_this","name","attr","value","trim","val","tagName","_getTagtName","prop","defaultValue","_chioseMethod","call","target","element","toLowerCase","type","options","_radio","_checkbox","_normal","symbol","undefined","length","split","push"],"mappings":"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","file":"serialize-lazy.min.js","sourcesContent":["class Serialize {\r\n    constructor() {\r\n    }\r\n    getJSON(panel) {\r\n        var self = this;\r\n        var data = {};\r\n        if(!$(panel)){\r\n            throw new Error(\"the parameter can`t be empty\");\r\n        }\r\n        $(panel).find(\"[name]\").each(function(){\r\n            var _this = $(this);\r\n            var name = _this.attr(\"name\");\r\n            var value = $.trim(_this.val());\r\n            var tagName = self._getTagtName(_this);\r\n            // 禁用的文本框不取值\r\n            if(_this.prop(\"disabled\")){\r\n                return;\r\n            }\r\n            var defaultValue = _this.attr(\"default\");\r\n            self._chioseMethod.call(self,{\r\n                tagName : tagName,\r\n                target : _this,\r\n                name : name,\r\n                value : value,\r\n                data : data,\r\n                defaultValue : defaultValue\r\n            });\r\n        });\r\n        return data;\r\n    }\r\n    // 获取元素的名称\r\n    _getTagtName(element){\r\n        var tagName = element.prop(\"tagName\").toLowerCase();\r\n        var type = element.attr(\"type\");\r\n        switch (tagName){\r\n            case \"input\" :\r\n                if(type == \"radio\" || type == \"checkbox\"){\r\n                    tagName = type;\r\n                }else{\r\n                    tagName = \"input\";\r\n                }\r\n                break;\r\n            case \"select\" :\r\n                tagName = \"select\";\r\n            default :\r\n                tagName = \"input\";\r\n                break;\r\n        }\r\n        return tagName;\r\n    }\r\n    // 外观模式方法\r\n    _chioseMethod(options){\r\n        switch (options.tagName){\r\n            case 'radio' :\r\n                this._radio(options);\r\n                break;\r\n            case 'checkbox' :\r\n                this._checkbox(options);\r\n                break;\r\n            default :\r\n                this._normal(options);\r\n                break;\r\n        }\r\n    }\r\n    _normal(options){\r\n        // 获取分割符\r\n        var symbol = options.target.attr(\"split\");\r\n        if(options.data[options.name] === undefined){\r\n            if(options.defaultValue && options.value.length === 0){\r\n                options.value = options.defaultValue;\r\n            }\r\n        }\r\n        // 用自义的分割符将值分割\r\n        if(symbol){\r\n            if(options.value === \"\"){\r\n                options.data[options.name] = [];\r\n            }else{\r\n                options.data[options.name] = options.value.split(symbol);\r\n            }\r\n            return;\r\n        }\r\n        options.data[options.name] = options.value;\r\n    }\r\n    // 获取选中的radio值\r\n    _radio(options){\r\n        // 初次的时候赋空值\r\n        if(options.data[options.name] === undefined){\r\n            options.data[options.name] = \"\";\r\n        }\r\n        if(!options.target.prop(\"checked\")){\r\n            return;\r\n        }\r\n        options.data[options.name] = options.value;\r\n    }\r\n    // 获取选中的checkbox值\r\n    _checkbox(options){\r\n        if(options.data[options.name] === undefined){\r\n            options.data[options.name] = [];\r\n        }\r\n        if(!options.target.prop(\"checked\")){\r\n            return;\r\n        }\r\n        options.data[options.name].push(options.value);\r\n    }\r\n}\r\nexport default Serialize;\n\n\n// WEBPACK FOOTER //\n// ./scripts/widget/serialize-lazy.js"],"sourceRoot":""}
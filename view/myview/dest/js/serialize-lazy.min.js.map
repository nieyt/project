{"version":3,"sources":["webpack:///serialize-lazy.min.js","webpack:///./scripts/widget/serialize-lazy.js"],"names":["webpackJsonp","136","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_classCallCheck2","_classCallCheck3","Serialize","this","prototype","getJSON","panel","self","data","$","Error","find","each","_this","name","attr","value","trim","val","tagName","_getTagtName","prop","defaultValue","_chioseMethod","call","target","element","toLowerCase","type","options","_radio","_checkbox","_normal","symbol","undefined","length","split","push"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAAUC,EAAQC,EAASC,GAEhC,YAQA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAAWF,GANzFH,EAAQI,YAAa,CAErB,IAAIE,GAAmBL,EAAoB,IAEvCM,EAAmBL,EAAuBI,GCXzCE,EDeW,WCdb,QAAAA,MAAc,EAAAD,EAAA,YAAAE,KAAAD,GDkIb,MA/GAA,GAAUE,UCjBXC,QDiB+B,SCjBvBC,GACJ,GAAIC,GAAOJ,KACPK,IACJ,KAAIC,EAAEH,GACF,KAAM,IAAII,OAAM,+BAqBpB,OAnBAD,GAAEH,GAAOK,KAAK,UAAUC,KAAK,WACzB,GAAIC,GAAQJ,EAAEN,MACVW,EAAOD,EAAME,KAAK,QAClBC,EAAQP,EAAEQ,KAAKJ,EAAMK,OACrBC,EAAUZ,EAAKa,aAAaP,EAEhC,KAAGA,EAAMQ,KAAK,YAAd,CAGA,GAAIC,GAAeT,EAAME,KAAK,UAC9BR,GAAKgB,cAAcC,KAAKjB,GACpBY,QAAUA,EACVM,OAASZ,EACTC,KAAOA,EACPE,MAAQA,EACRR,KAAOA,EACPc,aAAeA,OAGhBd,GDsBVN,EAAUE,UCnBXgB,aDmBoC,SCnBvBM,GACT,GAAIP,GAAUO,EAAQL,KAAK,WAAWM,cAClCC,EAAOF,EAAQX,KAAK,OACxB,QAAQI,GACJ,IAAK,QAEGA,EADO,SAARS,GAA2B,YAARA,EACRA,EAEA,OAEd,MACJ,KAAK,SACDT,EAAU,QACd,SACIA,EAAU,QAGlB,MAAOA,IDwBVjB,EAAUE,UCrBXmB,cDqBqC,SCrBvBM,GACV,OAAQA,EAAQV,SACZ,IAAK,QACDhB,KAAK2B,OAAOD,EACZ,MACJ,KAAK,WACD1B,KAAK4B,UAAUF,EACf,MACJ,SACI1B,KAAK6B,QAAQH,KD0BxB3B,EAAUE,UCtBX4B,QDsB+B,SCtBvBH,GAEJ,GAAII,GAASJ,EAAQJ,OAAOV,KAAK,QAOjC,OANkCmB,UAA/BL,EAAQrB,KAAKqB,EAAQf,OACjBe,EAAQP,cAAyC,IAAzBO,EAAQb,MAAMmB,SACrCN,EAAQb,MAAQa,EAAQP,cAI7BW,OACsB,KAAlBJ,EAAQb,MACPa,EAAQrB,KAAKqB,EAAQf,SAErBe,EAAQrB,KAAKqB,EAAQf,MAAQe,EAAQb,MAAMoB,MAAMH,SAIzDJ,EAAQrB,KAAKqB,EAAQf,MAAQe,EAAQb,QD2BxCd,EAAUE,UCxBX0B,ODwB8B,SCxBvBD,GAE+BK,SAA/BL,EAAQrB,KAAKqB,EAAQf,QACpBe,EAAQrB,KAAKqB,EAAQf,MAAQ,IAE7Be,EAAQJ,OAAOJ,KAAK,aAGxBQ,EAAQrB,KAAKqB,EAAQf,MAAQe,EAAQb,QD6BxCd,EAAUE,UC1BX2B,UD0BiC,SC1BvBF,GAC4BK,SAA/BL,EAAQrB,KAAKqB,EAAQf,QACpBe,EAAQrB,KAAKqB,EAAQf,UAErBe,EAAQJ,OAAOJ,KAAK,YAGxBQ,EAAQrB,KAAKqB,EAAQf,MAAMuB,KAAKR,EAAQb,QD6BpCd,IAGXR,GAAQ,WC7BMQ,ED8BdT,EAAOC,QAAUA,EAAQ","file":"serialize-lazy.min.js","sourcesContent":["webpackJsonp([7],{\n\n/***/ 136:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\texports.__esModule = true;\n\t\n\tvar _classCallCheck2 = __webpack_require__(32);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\t\n\tvar Serialize = function () {\n\t    function Serialize() {\n\t        (0, _classCallCheck3[\"default\"])(this, Serialize);\n\t    }\n\t\n\t    Serialize.prototype.getJSON = function getJSON(panel) {\n\t        var self = this;\n\t        var data = {};\n\t        if (!$(panel)) {\n\t            throw new Error(\"the parameter can`t be empty\");\n\t        }\n\t        $(panel).find(\"[name]\").each(function () {\n\t            var _this = $(this);\n\t            var name = _this.attr(\"name\");\n\t            var value = $.trim(_this.val());\n\t            var tagName = self._getTagtName(_this);\n\t            // 禁用的文本框不取值\n\t            if (_this.prop(\"disabled\")) {\n\t                return;\n\t            }\n\t            var defaultValue = _this.attr(\"default\");\n\t            self._chioseMethod.call(self, {\n\t                tagName: tagName,\n\t                target: _this,\n\t                name: name,\n\t                value: value,\n\t                data: data,\n\t                defaultValue: defaultValue\n\t            });\n\t        });\n\t        return data;\n\t    };\n\t    // 获取元素的名称\n\t\n\t\n\t    Serialize.prototype._getTagtName = function _getTagtName(element) {\n\t        var tagName = element.prop(\"tagName\").toLowerCase();\n\t        var type = element.attr(\"type\");\n\t        switch (tagName) {\n\t            case \"input\":\n\t                if (type == \"radio\" || type == \"checkbox\") {\n\t                    tagName = type;\n\t                } else {\n\t                    tagName = \"input\";\n\t                }\n\t                break;\n\t            case \"select\":\n\t                tagName = \"select\";\n\t            default:\n\t                tagName = \"input\";\n\t                break;\n\t        }\n\t        return tagName;\n\t    };\n\t    // 外观模式方法\n\t\n\t\n\t    Serialize.prototype._chioseMethod = function _chioseMethod(options) {\n\t        switch (options.tagName) {\n\t            case 'radio':\n\t                this._radio(options);\n\t                break;\n\t            case 'checkbox':\n\t                this._checkbox(options);\n\t                break;\n\t            default:\n\t                this._normal(options);\n\t                break;\n\t        }\n\t    };\n\t\n\t    Serialize.prototype._normal = function _normal(options) {\n\t        // 获取分割符\n\t        var symbol = options.target.attr(\"split\");\n\t        if (options.data[options.name] === undefined) {\n\t            if (options.defaultValue && options.value.length === 0) {\n\t                options.value = options.defaultValue;\n\t            }\n\t        }\n\t        // 用自义的分割符将值分割\n\t        if (symbol) {\n\t            if (options.value === \"\") {\n\t                options.data[options.name] = [];\n\t            } else {\n\t                options.data[options.name] = options.value.split(symbol);\n\t            }\n\t            return;\n\t        }\n\t        options.data[options.name] = options.value;\n\t    };\n\t    // 获取选中的radio值\n\t\n\t\n\t    Serialize.prototype._radio = function _radio(options) {\n\t        // 初次的时候赋空值\n\t        if (options.data[options.name] === undefined) {\n\t            options.data[options.name] = \"\";\n\t        }\n\t        if (!options.target.prop(\"checked\")) {\n\t            return;\n\t        }\n\t        options.data[options.name] = options.value;\n\t    };\n\t    // 获取选中的checkbox值\n\t\n\t\n\t    Serialize.prototype._checkbox = function _checkbox(options) {\n\t        if (options.data[options.name] === undefined) {\n\t            options.data[options.name] = [];\n\t        }\n\t        if (!options.target.prop(\"checked\")) {\n\t            return;\n\t        }\n\t        options.data[options.name].push(options.value);\n\t    };\n\t\n\t    return Serialize;\n\t}();\n\t\n\texports[\"default\"] = Serialize;\n\tmodule.exports = exports[\"default\"];\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// serialize-lazy.min.js","class Serialize {\r\n    constructor() {\r\n    }\r\n    getJSON(panel) {\r\n        var self = this;\r\n        var data = {};\r\n        if(!$(panel)){\r\n            throw new Error(\"the parameter can`t be empty\");\r\n        }\r\n        $(panel).find(\"[name]\").each(function(){\r\n            var _this = $(this);\r\n            var name = _this.attr(\"name\");\r\n            var value = $.trim(_this.val());\r\n            var tagName = self._getTagtName(_this);\r\n            // 禁用的文本框不取值\r\n            if(_this.prop(\"disabled\")){\r\n                return;\r\n            }\r\n            var defaultValue = _this.attr(\"default\");\r\n            self._chioseMethod.call(self,{\r\n                tagName : tagName,\r\n                target : _this,\r\n                name : name,\r\n                value : value,\r\n                data : data,\r\n                defaultValue : defaultValue\r\n            });\r\n        });\r\n        return data;\r\n    }\r\n    // 获取元素的名称\r\n    _getTagtName(element){\r\n        var tagName = element.prop(\"tagName\").toLowerCase();\r\n        var type = element.attr(\"type\");\r\n        switch (tagName){\r\n            case \"input\" :\r\n                if(type == \"radio\" || type == \"checkbox\"){\r\n                    tagName = type;\r\n                }else{\r\n                    tagName = \"input\";\r\n                }\r\n                break;\r\n            case \"select\" :\r\n                tagName = \"select\";\r\n            default :\r\n                tagName = \"input\";\r\n                break;\r\n        }\r\n        return tagName;\r\n    }\r\n    // 外观模式方法\r\n    _chioseMethod(options){\r\n        switch (options.tagName){\r\n            case 'radio' :\r\n                this._radio(options);\r\n                break;\r\n            case 'checkbox' :\r\n                this._checkbox(options);\r\n                break;\r\n            default :\r\n                this._normal(options);\r\n                break;\r\n        }\r\n    }\r\n    _normal(options){\r\n        // 获取分割符\r\n        var symbol = options.target.attr(\"split\");\r\n        if(options.data[options.name] === undefined){\r\n            if(options.defaultValue && options.value.length === 0){\r\n                options.value = options.defaultValue;\r\n            }\r\n        }\r\n        // 用自义的分割符将值分割\r\n        if(symbol){\r\n            if(options.value === \"\"){\r\n                options.data[options.name] = [];\r\n            }else{\r\n                options.data[options.name] = options.value.split(symbol);\r\n            }\r\n            return;\r\n        }\r\n        options.data[options.name] = options.value;\r\n    }\r\n    // 获取选中的radio值\r\n    _radio(options){\r\n        // 初次的时候赋空值\r\n        if(options.data[options.name] === undefined){\r\n            options.data[options.name] = \"\";\r\n        }\r\n        if(!options.target.prop(\"checked\")){\r\n            return;\r\n        }\r\n        options.data[options.name] = options.value;\r\n    }\r\n    // 获取选中的checkbox值\r\n    _checkbox(options){\r\n        if(options.data[options.name] === undefined){\r\n            options.data[options.name] = [];\r\n        }\r\n        if(!options.target.prop(\"checked\")){\r\n            return;\r\n        }\r\n        options.data[options.name].push(options.value);\r\n    }\r\n}\r\nexport default Serialize;\n\n\n// WEBPACK FOOTER //\n// ./scripts/widget/serialize-lazy.js"],"sourceRoot":""}